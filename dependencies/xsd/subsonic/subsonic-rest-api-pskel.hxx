// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SUBSONIC_REST_API_PSKEL_HXX
#define SUBSONIC_REST_API_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace restapi
{
  class Response_pskel;
  class ResponseStatus_pskel;
  class Version_pskel;
  class MusicFolders_pskel;
  class MusicFolder_pskel;
  class Indexes_pskel;
  class Index_pskel;
  class Artist_pskel;
  class Genres_pskel;
  class Genre_pskel;
  class ArtistsID3_pskel;
  class IndexID3_pskel;
  class ArtistID3_pskel;
  class ArtistWithAlbumsID3_pskel;
  class AlbumID3_pskel;
  class AlbumWithSongsID3_pskel;
  class Videos_pskel;
  class Directory_pskel;
  class Child_pskel;
  class MediaType_pskel;
  class UserRating_pskel;
  class AverageRating_pskel;
  class NowPlaying_pskel;
  class NowPlayingEntry_pskel;
  class SearchResult_pskel;
  class SearchResult2_pskel;
  class SearchResult3_pskel;
  class Playlists_pskel;
  class Playlist_pskel;
  class PlaylistWithSongs_pskel;
  class JukeboxStatus_pskel;
  class JukeboxPlaylist_pskel;
  class ChatMessages_pskel;
  class ChatMessage_pskel;
  class AlbumList_pskel;
  class AlbumList2_pskel;
  class Songs_pskel;
  class Lyrics_pskel;
  class Podcasts_pskel;
  class PodcastChannel_pskel;
  class PodcastEpisode_pskel;
  class PodcastStatus_pskel;
  class InternetRadioStations_pskel;
  class InternetRadioStation_pskel;
  class Bookmarks_pskel;
  class Bookmark_pskel;
  class Shares_pskel;
  class Share_pskel;
  class Starred_pskel;
  class Starred2_pskel;
  class License_pskel;
  class Users_pskel;
  class User_pskel;
  class Error_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

namespace restapi
{
  class Response_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    musicFolders ();

    virtual void
    indexes ();

    virtual void
    directory ();

    virtual void
    genres ();

    virtual void
    artists ();

    virtual void
    artist ();

    virtual void
    album ();

    virtual void
    song ();

    virtual void
    videos ();

    virtual void
    nowPlaying ();

    virtual void
    searchResult ();

    virtual void
    searchResult2 ();

    virtual void
    searchResult3 ();

    virtual void
    playlists ();

    virtual void
    playlist ();

    virtual void
    jukeboxStatus ();

    virtual void
    jukeboxPlaylist ();

    virtual void
    license ();

    virtual void
    users ();

    virtual void
    user ();

    virtual void
    chatMessages ();

    virtual void
    albumList ();

    virtual void
    albumList2 ();

    virtual void
    randomSongs ();

    virtual void
    songsByGenre ();

    virtual void
    lyrics ();

    virtual void
    podcasts ();

    virtual void
    internetRadioStations ();

    virtual void
    bookmarks ();

    virtual void
    shares ();

    virtual void
    starred ();

    virtual void
    starred2 ();

    virtual void
    error ();

    virtual void
    status ();

    virtual void
    version ();

    virtual void
    post_Response ();

    // Parser construction API.
    //
    void
    musicFolders_parser (::restapi::MusicFolders_pskel&);

    void
    indexes_parser (::restapi::Indexes_pskel&);

    void
    directory_parser (::restapi::Directory_pskel&);

    void
    genres_parser (::restapi::Genres_pskel&);

    void
    artists_parser (::restapi::ArtistsID3_pskel&);

    void
    artist_parser (::restapi::ArtistWithAlbumsID3_pskel&);

    void
    album_parser (::restapi::AlbumWithSongsID3_pskel&);

    void
    song_parser (::restapi::Child_pskel&);

    void
    videos_parser (::restapi::Videos_pskel&);

    void
    nowPlaying_parser (::restapi::NowPlaying_pskel&);

    void
    searchResult_parser (::restapi::SearchResult_pskel&);

    void
    searchResult2_parser (::restapi::SearchResult2_pskel&);

    void
    searchResult3_parser (::restapi::SearchResult3_pskel&);

    void
    playlists_parser (::restapi::Playlists_pskel&);

    void
    playlist_parser (::restapi::PlaylistWithSongs_pskel&);

    void
    jukeboxStatus_parser (::restapi::JukeboxStatus_pskel&);

    void
    jukeboxPlaylist_parser (::restapi::JukeboxPlaylist_pskel&);

    void
    license_parser (::restapi::License_pskel&);

    void
    users_parser (::restapi::Users_pskel&);

    void
    user_parser (::restapi::User_pskel&);

    void
    chatMessages_parser (::restapi::ChatMessages_pskel&);

    void
    albumList_parser (::restapi::AlbumList_pskel&);

    void
    albumList2_parser (::restapi::AlbumList2_pskel&);

    void
    randomSongs_parser (::restapi::Songs_pskel&);

    void
    songsByGenre_parser (::restapi::Songs_pskel&);

    void
    lyrics_parser (::restapi::Lyrics_pskel&);

    void
    podcasts_parser (::restapi::Podcasts_pskel&);

    void
    internetRadioStations_parser (::restapi::InternetRadioStations_pskel&);

    void
    bookmarks_parser (::restapi::Bookmarks_pskel&);

    void
    shares_parser (::restapi::Shares_pskel&);

    void
    starred_parser (::restapi::Starred_pskel&);

    void
    starred2_parser (::restapi::Starred2_pskel&);

    void
    error_parser (::restapi::Error_pskel&);

    void
    status_parser (::restapi::ResponseStatus_pskel&);

    void
    version_parser (::restapi::Version_pskel&);

    void
    parsers (::restapi::MusicFolders_pskel& /* musicFolders */,
             ::restapi::Indexes_pskel& /* indexes */,
             ::restapi::Directory_pskel& /* directory */,
             ::restapi::Genres_pskel& /* genres */,
             ::restapi::ArtistsID3_pskel& /* artists */,
             ::restapi::ArtistWithAlbumsID3_pskel& /* artist */,
             ::restapi::AlbumWithSongsID3_pskel& /* album */,
             ::restapi::Child_pskel& /* song */,
             ::restapi::Videos_pskel& /* videos */,
             ::restapi::NowPlaying_pskel& /* nowPlaying */,
             ::restapi::SearchResult_pskel& /* searchResult */,
             ::restapi::SearchResult2_pskel& /* searchResult2 */,
             ::restapi::SearchResult3_pskel& /* searchResult3 */,
             ::restapi::Playlists_pskel& /* playlists */,
             ::restapi::PlaylistWithSongs_pskel& /* playlist */,
             ::restapi::JukeboxStatus_pskel& /* jukeboxStatus */,
             ::restapi::JukeboxPlaylist_pskel& /* jukeboxPlaylist */,
             ::restapi::License_pskel& /* license */,
             ::restapi::Users_pskel& /* users */,
             ::restapi::User_pskel& /* user */,
             ::restapi::ChatMessages_pskel& /* chatMessages */,
             ::restapi::AlbumList_pskel& /* albumList */,
             ::restapi::AlbumList2_pskel& /* albumList2 */,
             ::restapi::Songs_pskel& /* randomSongs */,
             ::restapi::Songs_pskel& /* songsByGenre */,
             ::restapi::Lyrics_pskel& /* lyrics */,
             ::restapi::Podcasts_pskel& /* podcasts */,
             ::restapi::InternetRadioStations_pskel& /* internetRadioStations */,
             ::restapi::Bookmarks_pskel& /* bookmarks */,
             ::restapi::Shares_pskel& /* shares */,
             ::restapi::Starred_pskel& /* starred */,
             ::restapi::Starred2_pskel& /* starred2 */,
             ::restapi::Error_pskel& /* error */,
             ::restapi::ResponseStatus_pskel& /* status */,
             ::restapi::Version_pskel& /* version */);

    // Constructor.
    //
    Response_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::MusicFolders_pskel* musicFolders_parser_;
    ::restapi::Indexes_pskel* indexes_parser_;
    ::restapi::Directory_pskel* directory_parser_;
    ::restapi::Genres_pskel* genres_parser_;
    ::restapi::ArtistsID3_pskel* artists_parser_;
    ::restapi::ArtistWithAlbumsID3_pskel* artist_parser_;
    ::restapi::AlbumWithSongsID3_pskel* album_parser_;
    ::restapi::Child_pskel* song_parser_;
    ::restapi::Videos_pskel* videos_parser_;
    ::restapi::NowPlaying_pskel* nowPlaying_parser_;
    ::restapi::SearchResult_pskel* searchResult_parser_;
    ::restapi::SearchResult2_pskel* searchResult2_parser_;
    ::restapi::SearchResult3_pskel* searchResult3_parser_;
    ::restapi::Playlists_pskel* playlists_parser_;
    ::restapi::PlaylistWithSongs_pskel* playlist_parser_;
    ::restapi::JukeboxStatus_pskel* jukeboxStatus_parser_;
    ::restapi::JukeboxPlaylist_pskel* jukeboxPlaylist_parser_;
    ::restapi::License_pskel* license_parser_;
    ::restapi::Users_pskel* users_parser_;
    ::restapi::User_pskel* user_parser_;
    ::restapi::ChatMessages_pskel* chatMessages_parser_;
    ::restapi::AlbumList_pskel* albumList_parser_;
    ::restapi::AlbumList2_pskel* albumList2_parser_;
    ::restapi::Songs_pskel* randomSongs_parser_;
    ::restapi::Songs_pskel* songsByGenre_parser_;
    ::restapi::Lyrics_pskel* lyrics_parser_;
    ::restapi::Podcasts_pskel* podcasts_parser_;
    ::restapi::InternetRadioStations_pskel* internetRadioStations_parser_;
    ::restapi::Bookmarks_pskel* bookmarks_parser_;
    ::restapi::Shares_pskel* shares_parser_;
    ::restapi::Starred_pskel* starred_parser_;
    ::restapi::Starred2_pskel* starred2_parser_;
    ::restapi::Error_pskel* error_parser_;
    ::restapi::ResponseStatus_pskel* status_parser_;
    ::restapi::Version_pskel* version_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Response_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

    protected:
    struct v_state_attr_
    {
      bool status;
      bool version;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class ResponseStatus_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResponseStatus ();
  };

  class Version_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Version ();
  };

  class MusicFolders_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    musicFolder ();

    virtual void
    post_MusicFolders ();

    // Parser construction API.
    //
    void
    musicFolder_parser (::restapi::MusicFolder_pskel&);

    void
    parsers (::restapi::MusicFolder_pskel& /* musicFolder */);

    // Constructor.
    //
    MusicFolders_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::MusicFolder_pskel* musicFolder_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::MusicFolders_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class MusicFolder_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    id (int);

    virtual void
    name (const ::std::string&);

    virtual void
    post_MusicFolder ();

    // Parser construction API.
    //
    void
    id_parser (::xml_schema::int_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::int_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    MusicFolder_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::int_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Indexes_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    shortcut ();

    virtual void
    index ();

    virtual void
    child ();

    virtual void
    lastModified (long long);

    virtual void
    ignoredArticles (const ::std::string&);

    virtual void
    post_Indexes ();

    // Parser construction API.
    //
    void
    shortcut_parser (::restapi::Artist_pskel&);

    void
    index_parser (::restapi::Index_pskel&);

    void
    child_parser (::restapi::Child_pskel&);

    void
    lastModified_parser (::xml_schema::long_pskel&);

    void
    ignoredArticles_parser (::xml_schema::string_pskel&);

    void
    parsers (::restapi::Artist_pskel& /* shortcut */,
             ::restapi::Index_pskel& /* index */,
             ::restapi::Child_pskel& /* child */,
             ::xml_schema::long_pskel& /* lastModified */,
             ::xml_schema::string_pskel& /* ignoredArticles */);

    // Constructor.
    //
    Indexes_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::Artist_pskel* shortcut_parser_;
    ::restapi::Index_pskel* index_parser_;
    ::restapi::Child_pskel* child_parser_;
    ::xml_schema::long_pskel* lastModified_parser_;
    ::xml_schema::string_pskel* ignoredArticles_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Indexes_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool lastModified;
      bool ignoredArticles;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Index_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    artist ();

    virtual void
    name (const ::std::string&);

    virtual void
    post_Index ();

    // Parser construction API.
    //
    void
    artist_parser (::restapi::Artist_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::restapi::Artist_pskel& /* artist */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    Index_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::Artist_pskel* artist_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Index_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Artist_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    id (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    starred (const ::xml_schema::date_time&);

    virtual void
    post_Artist ();

    // Parser construction API.
    //
    void
    id_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    starred_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::date_time_pskel& /* starred */);

    // Constructor.
    //
    Artist_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::date_time_pskel* starred_parser_;

    protected:
    struct v_state_attr_
    {
      bool id;
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Genres_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    genre ();

    virtual void
    post_Genres ();

    // Parser construction API.
    //
    void
    genre_parser (::restapi::Genre_pskel&);

    void
    parsers (::restapi::Genre_pskel& /* genre */);

    // Constructor.
    //
    Genres_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Genre_pskel* genre_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Genres_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Genre_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    songCount (int);

    virtual void
    albumCount (int);

    virtual void
    post_Genre ();

    // Parser construction API.
    //
    void
    songCount_parser (::xml_schema::int_pskel&);

    void
    albumCount_parser (::xml_schema::int_pskel&);

    void
    parsers (::xml_schema::int_pskel& /* songCount */,
             ::xml_schema::int_pskel& /* albumCount */);

    // Constructor.
    //
    Genre_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    virtual bool
    _characters_impl (const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::int_pskel* songCount_parser_;
    ::xml_schema::int_pskel* albumCount_parser_;

    protected:
    struct v_state_attr_
    {
      bool songCount;
      bool albumCount;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class ArtistsID3_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    index ();

    virtual void
    ignoredArticles (const ::std::string&);

    virtual void
    post_ArtistsID3 ();

    // Parser construction API.
    //
    void
    index_parser (::restapi::IndexID3_pskel&);

    void
    ignoredArticles_parser (::xml_schema::string_pskel&);

    void
    parsers (::restapi::IndexID3_pskel& /* index */,
             ::xml_schema::string_pskel& /* ignoredArticles */);

    // Constructor.
    //
    ArtistsID3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::IndexID3_pskel* index_parser_;
    ::xml_schema::string_pskel* ignoredArticles_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::ArtistsID3_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool ignoredArticles;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class IndexID3_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    artist ();

    virtual void
    name (const ::std::string&);

    virtual void
    post_IndexID3 ();

    // Parser construction API.
    //
    void
    artist_parser (::restapi::ArtistID3_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::restapi::ArtistID3_pskel& /* artist */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    IndexID3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::ArtistID3_pskel* artist_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::IndexID3_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class ArtistID3_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    id (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    coverArt (const ::std::string&);

    virtual void
    albumCount (int);

    virtual void
    starred (const ::xml_schema::date_time&);

    virtual void
    post_ArtistID3 ();

    // Parser construction API.
    //
    void
    id_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    coverArt_parser (::xml_schema::string_pskel&);

    void
    albumCount_parser (::xml_schema::int_pskel&);

    void
    starred_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* coverArt */,
             ::xml_schema::int_pskel& /* albumCount */,
             ::xml_schema::date_time_pskel& /* starred */);

    // Constructor.
    //
    ArtistID3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* coverArt_parser_;
    ::xml_schema::int_pskel* albumCount_parser_;
    ::xml_schema::date_time_pskel* starred_parser_;

    protected:
    struct v_state_attr_
    {
      bool id;
      bool name;
      bool albumCount;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class ArtistWithAlbumsID3_pskel: public virtual ::restapi::ArtistID3_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    album ();

    virtual void
    post_ArtistWithAlbumsID3 ();

    // Parser construction API.
    //
    void
    album_parser (::restapi::AlbumID3_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* coverArt */,
             ::xml_schema::int_pskel& /* albumCount */,
             ::xml_schema::date_time_pskel& /* starred */,
             ::restapi::AlbumID3_pskel& /* album */);

    // Constructor.
    //
    ArtistWithAlbumsID3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::AlbumID3_pskel* album_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::ArtistWithAlbumsID3_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class AlbumID3_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    id (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    artist (const ::std::string&);

    virtual void
    artistId (const ::std::string&);

    virtual void
    coverArt (const ::std::string&);

    virtual void
    songCount (int);

    virtual void
    duration (int);

    virtual void
    created (const ::xml_schema::date_time&);

    virtual void
    starred (const ::xml_schema::date_time&);

    virtual void
    year (int);

    virtual void
    genre (const ::std::string&);

    virtual void
    post_AlbumID3 ();

    // Parser construction API.
    //
    void
    id_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    artist_parser (::xml_schema::string_pskel&);

    void
    artistId_parser (::xml_schema::string_pskel&);

    void
    coverArt_parser (::xml_schema::string_pskel&);

    void
    songCount_parser (::xml_schema::int_pskel&);

    void
    duration_parser (::xml_schema::int_pskel&);

    void
    created_parser (::xml_schema::date_time_pskel&);

    void
    starred_parser (::xml_schema::date_time_pskel&);

    void
    year_parser (::xml_schema::int_pskel&);

    void
    genre_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* artist */,
             ::xml_schema::string_pskel& /* artistId */,
             ::xml_schema::string_pskel& /* coverArt */,
             ::xml_schema::int_pskel& /* songCount */,
             ::xml_schema::int_pskel& /* duration */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* starred */,
             ::xml_schema::int_pskel& /* year */,
             ::xml_schema::string_pskel& /* genre */);

    // Constructor.
    //
    AlbumID3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* artist_parser_;
    ::xml_schema::string_pskel* artistId_parser_;
    ::xml_schema::string_pskel* coverArt_parser_;
    ::xml_schema::int_pskel* songCount_parser_;
    ::xml_schema::int_pskel* duration_parser_;
    ::xml_schema::date_time_pskel* created_parser_;
    ::xml_schema::date_time_pskel* starred_parser_;
    ::xml_schema::int_pskel* year_parser_;
    ::xml_schema::string_pskel* genre_parser_;

    protected:
    struct v_state_attr_
    {
      bool id;
      bool name;
      bool songCount;
      bool duration;
      bool created;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class AlbumWithSongsID3_pskel: public virtual ::restapi::AlbumID3_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    song ();

    virtual void
    post_AlbumWithSongsID3 ();

    // Parser construction API.
    //
    void
    song_parser (::restapi::Child_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* artist */,
             ::xml_schema::string_pskel& /* artistId */,
             ::xml_schema::string_pskel& /* coverArt */,
             ::xml_schema::int_pskel& /* songCount */,
             ::xml_schema::int_pskel& /* duration */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* starred */,
             ::xml_schema::int_pskel& /* year */,
             ::xml_schema::string_pskel& /* genre */,
             ::restapi::Child_pskel& /* song */);

    // Constructor.
    //
    AlbumWithSongsID3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Child_pskel* song_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::AlbumWithSongsID3_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Videos_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    video ();

    virtual void
    post_Videos ();

    // Parser construction API.
    //
    void
    video_parser (::restapi::Child_pskel&);

    void
    parsers (::restapi::Child_pskel& /* video */);

    // Constructor.
    //
    Videos_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Child_pskel* video_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Videos_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Directory_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    child ();

    virtual void
    id (const ::std::string&);

    virtual void
    parent (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    starred (const ::xml_schema::date_time&);

    virtual void
    post_Directory ();

    // Parser construction API.
    //
    void
    child_parser (::restapi::Child_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    parent_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    starred_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::restapi::Child_pskel& /* child */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* parent */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::date_time_pskel& /* starred */);

    // Constructor.
    //
    Directory_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::Child_pskel* child_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* parent_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::date_time_pskel* starred_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Directory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Child_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    id (const ::std::string&);

    virtual void
    parent (const ::std::string&);

    virtual void
    isDir (bool);

    virtual void
    title (const ::std::string&);

    virtual void
    album (const ::std::string&);

    virtual void
    artist (const ::std::string&);

    virtual void
    track (int);

    virtual void
    year (int);

    virtual void
    genre (const ::std::string&);

    virtual void
    coverArt (const ::std::string&);

    virtual void
    size (long long);

    virtual void
    contentType (const ::std::string&);

    virtual void
    suffix (const ::std::string&);

    virtual void
    transcodedContentType (const ::std::string&);

    virtual void
    transcodedSuffix (const ::std::string&);

    virtual void
    duration (int);

    virtual void
    bitRate (int);

    virtual void
    path (const ::std::string&);

    virtual void
    isVideo (bool);

    virtual void
    userRating ();

    virtual void
    averageRating ();

    virtual void
    discNumber (int);

    virtual void
    created (const ::xml_schema::date_time&);

    virtual void
    starred (const ::xml_schema::date_time&);

    virtual void
    albumId (const ::std::string&);

    virtual void
    artistId (const ::std::string&);

    virtual void
    type ();

    virtual void
    bookmarkPosition (long long);

    virtual void
    post_Child ();

    // Parser construction API.
    //
    void
    id_parser (::xml_schema::string_pskel&);

    void
    parent_parser (::xml_schema::string_pskel&);

    void
    isDir_parser (::xml_schema::boolean_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    album_parser (::xml_schema::string_pskel&);

    void
    artist_parser (::xml_schema::string_pskel&);

    void
    track_parser (::xml_schema::int_pskel&);

    void
    year_parser (::xml_schema::int_pskel&);

    void
    genre_parser (::xml_schema::string_pskel&);

    void
    coverArt_parser (::xml_schema::string_pskel&);

    void
    size_parser (::xml_schema::long_pskel&);

    void
    contentType_parser (::xml_schema::string_pskel&);

    void
    suffix_parser (::xml_schema::string_pskel&);

    void
    transcodedContentType_parser (::xml_schema::string_pskel&);

    void
    transcodedSuffix_parser (::xml_schema::string_pskel&);

    void
    duration_parser (::xml_schema::int_pskel&);

    void
    bitRate_parser (::xml_schema::int_pskel&);

    void
    path_parser (::xml_schema::string_pskel&);

    void
    isVideo_parser (::xml_schema::boolean_pskel&);

    void
    userRating_parser (::restapi::UserRating_pskel&);

    void
    averageRating_parser (::restapi::AverageRating_pskel&);

    void
    discNumber_parser (::xml_schema::int_pskel&);

    void
    created_parser (::xml_schema::date_time_pskel&);

    void
    starred_parser (::xml_schema::date_time_pskel&);

    void
    albumId_parser (::xml_schema::string_pskel&);

    void
    artistId_parser (::xml_schema::string_pskel&);

    void
    type_parser (::restapi::MediaType_pskel&);

    void
    bookmarkPosition_parser (::xml_schema::long_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* parent */,
             ::xml_schema::boolean_pskel& /* isDir */,
             ::xml_schema::string_pskel& /* title */,
             ::xml_schema::string_pskel& /* album */,
             ::xml_schema::string_pskel& /* artist */,
             ::xml_schema::int_pskel& /* track */,
             ::xml_schema::int_pskel& /* year */,
             ::xml_schema::string_pskel& /* genre */,
             ::xml_schema::string_pskel& /* coverArt */,
             ::xml_schema::long_pskel& /* size */,
             ::xml_schema::string_pskel& /* contentType */,
             ::xml_schema::string_pskel& /* suffix */,
             ::xml_schema::string_pskel& /* transcodedContentType */,
             ::xml_schema::string_pskel& /* transcodedSuffix */,
             ::xml_schema::int_pskel& /* duration */,
             ::xml_schema::int_pskel& /* bitRate */,
             ::xml_schema::string_pskel& /* path */,
             ::xml_schema::boolean_pskel& /* isVideo */,
             ::restapi::UserRating_pskel& /* userRating */,
             ::restapi::AverageRating_pskel& /* averageRating */,
             ::xml_schema::int_pskel& /* discNumber */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* starred */,
             ::xml_schema::string_pskel& /* albumId */,
             ::xml_schema::string_pskel& /* artistId */,
             ::restapi::MediaType_pskel& /* type */,
             ::xml_schema::long_pskel& /* bookmarkPosition */);

    // Constructor.
    //
    Child_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* parent_parser_;
    ::xml_schema::boolean_pskel* isDir_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xml_schema::string_pskel* album_parser_;
    ::xml_schema::string_pskel* artist_parser_;
    ::xml_schema::int_pskel* track_parser_;
    ::xml_schema::int_pskel* year_parser_;
    ::xml_schema::string_pskel* genre_parser_;
    ::xml_schema::string_pskel* coverArt_parser_;
    ::xml_schema::long_pskel* size_parser_;
    ::xml_schema::string_pskel* contentType_parser_;
    ::xml_schema::string_pskel* suffix_parser_;
    ::xml_schema::string_pskel* transcodedContentType_parser_;
    ::xml_schema::string_pskel* transcodedSuffix_parser_;
    ::xml_schema::int_pskel* duration_parser_;
    ::xml_schema::int_pskel* bitRate_parser_;
    ::xml_schema::string_pskel* path_parser_;
    ::xml_schema::boolean_pskel* isVideo_parser_;
    ::restapi::UserRating_pskel* userRating_parser_;
    ::restapi::AverageRating_pskel* averageRating_parser_;
    ::xml_schema::int_pskel* discNumber_parser_;
    ::xml_schema::date_time_pskel* created_parser_;
    ::xml_schema::date_time_pskel* starred_parser_;
    ::xml_schema::string_pskel* albumId_parser_;
    ::xml_schema::string_pskel* artistId_parser_;
    ::restapi::MediaType_pskel* type_parser_;
    ::xml_schema::long_pskel* bookmarkPosition_parser_;

    protected:
    struct v_state_attr_
    {
      bool id;
      bool isDir;
      bool title;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class MediaType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MediaType ();
  };

  class UserRating_pskel: public virtual ::xml_schema::int_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_UserRating ();
  };

  class AverageRating_pskel: public virtual ::xml_schema::double_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AverageRating ();
  };

  class NowPlaying_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    entry ();

    virtual void
    post_NowPlaying ();

    // Parser construction API.
    //
    void
    entry_parser (::restapi::NowPlayingEntry_pskel&);

    void
    parsers (::restapi::NowPlayingEntry_pskel& /* entry */);

    // Constructor.
    //
    NowPlaying_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::NowPlayingEntry_pskel* entry_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::NowPlaying_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class NowPlayingEntry_pskel: public virtual ::restapi::Child_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    username (const ::std::string&);

    virtual void
    minutesAgo (int);

    virtual void
    playerId (int);

    virtual void
    playerName (const ::std::string&);

    virtual void
    post_NowPlayingEntry ();

    // Parser construction API.
    //
    void
    username_parser (::xml_schema::string_pskel&);

    void
    minutesAgo_parser (::xml_schema::int_pskel&);

    void
    playerId_parser (::xml_schema::int_pskel&);

    void
    playerName_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* parent */,
             ::xml_schema::boolean_pskel& /* isDir */,
             ::xml_schema::string_pskel& /* title */,
             ::xml_schema::string_pskel& /* album */,
             ::xml_schema::string_pskel& /* artist */,
             ::xml_schema::int_pskel& /* track */,
             ::xml_schema::int_pskel& /* year */,
             ::xml_schema::string_pskel& /* genre */,
             ::xml_schema::string_pskel& /* coverArt */,
             ::xml_schema::long_pskel& /* size */,
             ::xml_schema::string_pskel& /* contentType */,
             ::xml_schema::string_pskel& /* suffix */,
             ::xml_schema::string_pskel& /* transcodedContentType */,
             ::xml_schema::string_pskel& /* transcodedSuffix */,
             ::xml_schema::int_pskel& /* duration */,
             ::xml_schema::int_pskel& /* bitRate */,
             ::xml_schema::string_pskel& /* path */,
             ::xml_schema::boolean_pskel& /* isVideo */,
             ::restapi::UserRating_pskel& /* userRating */,
             ::restapi::AverageRating_pskel& /* averageRating */,
             ::xml_schema::int_pskel& /* discNumber */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* starred */,
             ::xml_schema::string_pskel& /* albumId */,
             ::xml_schema::string_pskel& /* artistId */,
             ::restapi::MediaType_pskel& /* type */,
             ::xml_schema::long_pskel& /* bookmarkPosition */,
             ::xml_schema::string_pskel& /* username */,
             ::xml_schema::int_pskel& /* minutesAgo */,
             ::xml_schema::int_pskel& /* playerId */,
             ::xml_schema::string_pskel& /* playerName */);

    // Constructor.
    //
    NowPlayingEntry_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* username_parser_;
    ::xml_schema::int_pskel* minutesAgo_parser_;
    ::xml_schema::int_pskel* playerId_parser_;
    ::xml_schema::string_pskel* playerName_parser_;

    protected:
    struct v_state_attr_
    {
      bool username;
      bool minutesAgo;
      bool playerId;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class SearchResult_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    match ();

    virtual void
    offset (int);

    virtual void
    totalHits (int);

    virtual void
    post_SearchResult ();

    // Parser construction API.
    //
    void
    match_parser (::restapi::Child_pskel&);

    void
    offset_parser (::xml_schema::int_pskel&);

    void
    totalHits_parser (::xml_schema::int_pskel&);

    void
    parsers (::restapi::Child_pskel& /* match */,
             ::xml_schema::int_pskel& /* offset */,
             ::xml_schema::int_pskel& /* totalHits */);

    // Constructor.
    //
    SearchResult_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::Child_pskel* match_parser_;
    ::xml_schema::int_pskel* offset_parser_;
    ::xml_schema::int_pskel* totalHits_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::SearchResult_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool offset;
      bool totalHits;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class SearchResult2_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    artist ();

    virtual void
    album ();

    virtual void
    song ();

    virtual void
    post_SearchResult2 ();

    // Parser construction API.
    //
    void
    artist_parser (::restapi::Artist_pskel&);

    void
    album_parser (::restapi::Child_pskel&);

    void
    song_parser (::restapi::Child_pskel&);

    void
    parsers (::restapi::Artist_pskel& /* artist */,
             ::restapi::Child_pskel& /* album */,
             ::restapi::Child_pskel& /* song */);

    // Constructor.
    //
    SearchResult2_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Artist_pskel* artist_parser_;
    ::restapi::Child_pskel* album_parser_;
    ::restapi::Child_pskel* song_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::SearchResult2_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class SearchResult3_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    artist ();

    virtual void
    album ();

    virtual void
    song ();

    virtual void
    post_SearchResult3 ();

    // Parser construction API.
    //
    void
    artist_parser (::restapi::ArtistID3_pskel&);

    void
    album_parser (::restapi::AlbumID3_pskel&);

    void
    song_parser (::restapi::Child_pskel&);

    void
    parsers (::restapi::ArtistID3_pskel& /* artist */,
             ::restapi::AlbumID3_pskel& /* album */,
             ::restapi::Child_pskel& /* song */);

    // Constructor.
    //
    SearchResult3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::ArtistID3_pskel* artist_parser_;
    ::restapi::AlbumID3_pskel* album_parser_;
    ::restapi::Child_pskel* song_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::SearchResult3_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Playlists_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    playlist ();

    virtual void
    post_Playlists ();

    // Parser construction API.
    //
    void
    playlist_parser (::restapi::Playlist_pskel&);

    void
    parsers (::restapi::Playlist_pskel& /* playlist */);

    // Constructor.
    //
    Playlists_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Playlist_pskel* playlist_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Playlists_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Playlist_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    allowedUser (const ::std::string&);

    virtual void
    id (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    comment (const ::std::string&);

    virtual void
    owner (const ::std::string&);

    virtual void
    public_ (bool);

    virtual void
    songCount (int);

    virtual void
    duration (int);

    virtual void
    created (const ::xml_schema::date_time&);

    virtual void
    post_Playlist ();

    // Parser construction API.
    //
    void
    allowedUser_parser (::xml_schema::string_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    comment_parser (::xml_schema::string_pskel&);

    void
    owner_parser (::xml_schema::string_pskel&);

    void
    public_parser (::xml_schema::boolean_pskel&);

    void
    songCount_parser (::xml_schema::int_pskel&);

    void
    duration_parser (::xml_schema::int_pskel&);

    void
    created_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* allowedUser */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* comment */,
             ::xml_schema::string_pskel& /* owner */,
             ::xml_schema::boolean_pskel& /* public */,
             ::xml_schema::int_pskel& /* songCount */,
             ::xml_schema::int_pskel& /* duration */,
             ::xml_schema::date_time_pskel& /* created */);

    // Constructor.
    //
    Playlist_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* allowedUser_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* comment_parser_;
    ::xml_schema::string_pskel* owner_parser_;
    ::xml_schema::boolean_pskel* public__parser_;
    ::xml_schema::int_pskel* songCount_parser_;
    ::xml_schema::int_pskel* duration_parser_;
    ::xml_schema::date_time_pskel* created_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Playlist_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool name;
      bool songCount;
      bool duration;
      bool created;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class PlaylistWithSongs_pskel: public virtual ::restapi::Playlist_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    entry ();

    virtual void
    post_PlaylistWithSongs ();

    // Parser construction API.
    //
    void
    entry_parser (::restapi::Child_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* allowedUser */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* comment */,
             ::xml_schema::string_pskel& /* owner */,
             ::xml_schema::boolean_pskel& /* public */,
             ::xml_schema::int_pskel& /* songCount */,
             ::xml_schema::int_pskel& /* duration */,
             ::xml_schema::date_time_pskel& /* created */,
             ::restapi::Child_pskel& /* entry */);

    // Constructor.
    //
    PlaylistWithSongs_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Child_pskel* entry_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::PlaylistWithSongs_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class JukeboxStatus_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    currentIndex (int);

    virtual void
    playing (bool);

    virtual void
    gain (float);

    virtual void
    position (int);

    virtual void
    post_JukeboxStatus ();

    // Parser construction API.
    //
    void
    currentIndex_parser (::xml_schema::int_pskel&);

    void
    playing_parser (::xml_schema::boolean_pskel&);

    void
    gain_parser (::xml_schema::float_pskel&);

    void
    position_parser (::xml_schema::int_pskel&);

    void
    parsers (::xml_schema::int_pskel& /* currentIndex */,
             ::xml_schema::boolean_pskel& /* playing */,
             ::xml_schema::float_pskel& /* gain */,
             ::xml_schema::int_pskel& /* position */);

    // Constructor.
    //
    JukeboxStatus_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::int_pskel* currentIndex_parser_;
    ::xml_schema::boolean_pskel* playing_parser_;
    ::xml_schema::float_pskel* gain_parser_;
    ::xml_schema::int_pskel* position_parser_;

    protected:
    struct v_state_attr_
    {
      bool currentIndex;
      bool playing;
      bool gain;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class JukeboxPlaylist_pskel: public virtual ::restapi::JukeboxStatus_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    entry ();

    virtual void
    post_JukeboxPlaylist ();

    // Parser construction API.
    //
    void
    entry_parser (::restapi::Child_pskel&);

    void
    parsers (::xml_schema::int_pskel& /* currentIndex */,
             ::xml_schema::boolean_pskel& /* playing */,
             ::xml_schema::float_pskel& /* gain */,
             ::xml_schema::int_pskel& /* position */,
             ::restapi::Child_pskel& /* entry */);

    // Constructor.
    //
    JukeboxPlaylist_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Child_pskel* entry_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::JukeboxPlaylist_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ChatMessages_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    chatMessage ();

    virtual void
    post_ChatMessages ();

    // Parser construction API.
    //
    void
    chatMessage_parser (::restapi::ChatMessage_pskel&);

    void
    parsers (::restapi::ChatMessage_pskel& /* chatMessage */);

    // Constructor.
    //
    ChatMessages_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::ChatMessage_pskel* chatMessage_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::ChatMessages_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ChatMessage_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    username (const ::std::string&);

    virtual void
    time (long long);

    virtual void
    message (const ::std::string&);

    virtual void
    post_ChatMessage ();

    // Parser construction API.
    //
    void
    username_parser (::xml_schema::string_pskel&);

    void
    time_parser (::xml_schema::long_pskel&);

    void
    message_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* username */,
             ::xml_schema::long_pskel& /* time */,
             ::xml_schema::string_pskel& /* message */);

    // Constructor.
    //
    ChatMessage_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* username_parser_;
    ::xml_schema::long_pskel* time_parser_;
    ::xml_schema::string_pskel* message_parser_;

    protected:
    struct v_state_attr_
    {
      bool username;
      bool time;
      bool message;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class AlbumList_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    album ();

    virtual void
    post_AlbumList ();

    // Parser construction API.
    //
    void
    album_parser (::restapi::Child_pskel&);

    void
    parsers (::restapi::Child_pskel& /* album */);

    // Constructor.
    //
    AlbumList_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Child_pskel* album_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::AlbumList_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class AlbumList2_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    album ();

    virtual void
    post_AlbumList2 ();

    // Parser construction API.
    //
    void
    album_parser (::restapi::AlbumID3_pskel&);

    void
    parsers (::restapi::AlbumID3_pskel& /* album */);

    // Constructor.
    //
    AlbumList2_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::AlbumID3_pskel* album_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::AlbumList2_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Songs_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    song ();

    virtual void
    post_Songs ();

    // Parser construction API.
    //
    void
    song_parser (::restapi::Child_pskel&);

    void
    parsers (::restapi::Child_pskel& /* song */);

    // Constructor.
    //
    Songs_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Child_pskel* song_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Songs_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Lyrics_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    artist (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    post_Lyrics ();

    // Parser construction API.
    //
    void
    artist_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* artist */,
             ::xml_schema::string_pskel& /* title */);

    // Constructor.
    //
    Lyrics_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    virtual bool
    _characters_impl (const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* artist_parser_;
    ::xml_schema::string_pskel* title_parser_;
  };

  class Podcasts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    channel ();

    virtual void
    post_Podcasts ();

    // Parser construction API.
    //
    void
    channel_parser (::restapi::PodcastChannel_pskel&);

    void
    parsers (::restapi::PodcastChannel_pskel& /* channel */);

    // Constructor.
    //
    Podcasts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::PodcastChannel_pskel* channel_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Podcasts_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class PodcastChannel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    episode ();

    virtual void
    id (const ::std::string&);

    virtual void
    url (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    description (const ::std::string&);

    virtual void
    status ();

    virtual void
    errorMessage (const ::std::string&);

    virtual void
    post_PodcastChannel ();

    // Parser construction API.
    //
    void
    episode_parser (::restapi::PodcastEpisode_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    url_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    description_parser (::xml_schema::string_pskel&);

    void
    status_parser (::restapi::PodcastStatus_pskel&);

    void
    errorMessage_parser (::xml_schema::string_pskel&);

    void
    parsers (::restapi::PodcastEpisode_pskel& /* episode */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* url */,
             ::xml_schema::string_pskel& /* title */,
             ::xml_schema::string_pskel& /* description */,
             ::restapi::PodcastStatus_pskel& /* status */,
             ::xml_schema::string_pskel& /* errorMessage */);

    // Constructor.
    //
    PodcastChannel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::PodcastEpisode_pskel* episode_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* url_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xml_schema::string_pskel* description_parser_;
    ::restapi::PodcastStatus_pskel* status_parser_;
    ::xml_schema::string_pskel* errorMessage_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::PodcastChannel_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool url;
      bool status;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class PodcastEpisode_pskel: public virtual ::restapi::Child_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    streamId (const ::std::string&);

    virtual void
    description (const ::std::string&);

    virtual void
    status ();

    virtual void
    publishDate (const ::xml_schema::date_time&);

    virtual void
    post_PodcastEpisode ();

    // Parser construction API.
    //
    void
    streamId_parser (::xml_schema::string_pskel&);

    void
    description_parser (::xml_schema::string_pskel&);

    void
    status_parser (::restapi::PodcastStatus_pskel&);

    void
    publishDate_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* parent */,
             ::xml_schema::boolean_pskel& /* isDir */,
             ::xml_schema::string_pskel& /* title */,
             ::xml_schema::string_pskel& /* album */,
             ::xml_schema::string_pskel& /* artist */,
             ::xml_schema::int_pskel& /* track */,
             ::xml_schema::int_pskel& /* year */,
             ::xml_schema::string_pskel& /* genre */,
             ::xml_schema::string_pskel& /* coverArt */,
             ::xml_schema::long_pskel& /* size */,
             ::xml_schema::string_pskel& /* contentType */,
             ::xml_schema::string_pskel& /* suffix */,
             ::xml_schema::string_pskel& /* transcodedContentType */,
             ::xml_schema::string_pskel& /* transcodedSuffix */,
             ::xml_schema::int_pskel& /* duration */,
             ::xml_schema::int_pskel& /* bitRate */,
             ::xml_schema::string_pskel& /* path */,
             ::xml_schema::boolean_pskel& /* isVideo */,
             ::restapi::UserRating_pskel& /* userRating */,
             ::restapi::AverageRating_pskel& /* averageRating */,
             ::xml_schema::int_pskel& /* discNumber */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* starred */,
             ::xml_schema::string_pskel& /* albumId */,
             ::xml_schema::string_pskel& /* artistId */,
             ::restapi::MediaType_pskel& /* type */,
             ::xml_schema::long_pskel& /* bookmarkPosition */,
             ::xml_schema::string_pskel& /* streamId */,
             ::xml_schema::string_pskel& /* description */,
             ::restapi::PodcastStatus_pskel& /* status */,
             ::xml_schema::date_time_pskel& /* publishDate */);

    // Constructor.
    //
    PodcastEpisode_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* streamId_parser_;
    ::xml_schema::string_pskel* description_parser_;
    ::restapi::PodcastStatus_pskel* status_parser_;
    ::xml_schema::date_time_pskel* publishDate_parser_;

    protected:
    struct v_state_attr_
    {
      bool status;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class PodcastStatus_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PodcastStatus ();
  };

  class InternetRadioStations_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    internetRadioStation ();

    virtual void
    post_InternetRadioStations ();

    // Parser construction API.
    //
    void
    internetRadioStation_parser (::restapi::InternetRadioStation_pskel&);

    void
    parsers (::restapi::InternetRadioStation_pskel& /* internetRadioStation */);

    // Constructor.
    //
    InternetRadioStations_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::InternetRadioStation_pskel* internetRadioStation_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::InternetRadioStations_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class InternetRadioStation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    id (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    streamUrl (const ::std::string&);

    virtual void
    homePageUrl (const ::std::string&);

    virtual void
    post_InternetRadioStation ();

    // Parser construction API.
    //
    void
    id_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    streamUrl_parser (::xml_schema::string_pskel&);

    void
    homePageUrl_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* streamUrl */,
             ::xml_schema::string_pskel& /* homePageUrl */);

    // Constructor.
    //
    InternetRadioStation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* streamUrl_parser_;
    ::xml_schema::string_pskel* homePageUrl_parser_;

    protected:
    struct v_state_attr_
    {
      bool id;
      bool name;
      bool streamUrl;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Bookmarks_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    bookmark ();

    virtual void
    post_Bookmarks ();

    // Parser construction API.
    //
    void
    bookmark_parser (::restapi::Bookmark_pskel&);

    void
    parsers (::restapi::Bookmark_pskel& /* bookmark */);

    // Constructor.
    //
    Bookmarks_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Bookmark_pskel* bookmark_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Bookmarks_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Bookmark_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    entry ();

    virtual void
    position (long long);

    virtual void
    username (const ::std::string&);

    virtual void
    comment (const ::std::string&);

    virtual void
    created (const ::xml_schema::date_time&);

    virtual void
    changed (const ::xml_schema::date_time&);

    virtual void
    post_Bookmark ();

    // Parser construction API.
    //
    void
    entry_parser (::restapi::Child_pskel&);

    void
    position_parser (::xml_schema::long_pskel&);

    void
    username_parser (::xml_schema::string_pskel&);

    void
    comment_parser (::xml_schema::string_pskel&);

    void
    created_parser (::xml_schema::date_time_pskel&);

    void
    changed_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::restapi::Child_pskel& /* entry */,
             ::xml_schema::long_pskel& /* position */,
             ::xml_schema::string_pskel& /* username */,
             ::xml_schema::string_pskel& /* comment */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* changed */);

    // Constructor.
    //
    Bookmark_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::Child_pskel* entry_parser_;
    ::xml_schema::long_pskel* position_parser_;
    ::xml_schema::string_pskel* username_parser_;
    ::xml_schema::string_pskel* comment_parser_;
    ::xml_schema::date_time_pskel* created_parser_;
    ::xml_schema::date_time_pskel* changed_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Bookmark_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool position;
      bool username;
      bool created;
      bool changed;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Shares_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    share ();

    virtual void
    post_Shares ();

    // Parser construction API.
    //
    void
    share_parser (::restapi::Share_pskel&);

    void
    parsers (::restapi::Share_pskel& /* share */);

    // Constructor.
    //
    Shares_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Share_pskel* share_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Shares_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Share_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    entry ();

    virtual void
    id (const ::std::string&);

    virtual void
    url (const ::std::string&);

    virtual void
    description (const ::std::string&);

    virtual void
    username (const ::std::string&);

    virtual void
    created (const ::xml_schema::date_time&);

    virtual void
    expires (const ::xml_schema::date_time&);

    virtual void
    lastVisited (const ::xml_schema::date_time&);

    virtual void
    visitCount (int);

    virtual void
    post_Share ();

    // Parser construction API.
    //
    void
    entry_parser (::restapi::Child_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    url_parser (::xml_schema::string_pskel&);

    void
    description_parser (::xml_schema::string_pskel&);

    void
    username_parser (::xml_schema::string_pskel&);

    void
    created_parser (::xml_schema::date_time_pskel&);

    void
    expires_parser (::xml_schema::date_time_pskel&);

    void
    lastVisited_parser (::xml_schema::date_time_pskel&);

    void
    visitCount_parser (::xml_schema::int_pskel&);

    void
    parsers (::restapi::Child_pskel& /* entry */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* url */,
             ::xml_schema::string_pskel& /* description */,
             ::xml_schema::string_pskel& /* username */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* expires */,
             ::xml_schema::date_time_pskel& /* lastVisited */,
             ::xml_schema::int_pskel& /* visitCount */);

    // Constructor.
    //
    Share_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::restapi::Child_pskel* entry_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* url_parser_;
    ::xml_schema::string_pskel* description_parser_;
    ::xml_schema::string_pskel* username_parser_;
    ::xml_schema::date_time_pskel* created_parser_;
    ::xml_schema::date_time_pskel* expires_parser_;
    ::xml_schema::date_time_pskel* lastVisited_parser_;
    ::xml_schema::int_pskel* visitCount_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Share_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool url;
      bool username;
      bool created;
      bool visitCount;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Starred_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    artist ();

    virtual void
    album ();

    virtual void
    song ();

    virtual void
    post_Starred ();

    // Parser construction API.
    //
    void
    artist_parser (::restapi::Artist_pskel&);

    void
    album_parser (::restapi::Child_pskel&);

    void
    song_parser (::restapi::Child_pskel&);

    void
    parsers (::restapi::Artist_pskel& /* artist */,
             ::restapi::Child_pskel& /* album */,
             ::restapi::Child_pskel& /* song */);

    // Constructor.
    //
    Starred_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::Artist_pskel* artist_parser_;
    ::restapi::Child_pskel* album_parser_;
    ::restapi::Child_pskel* song_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Starred_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Starred2_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    artist ();

    virtual void
    album ();

    virtual void
    song ();

    virtual void
    post_Starred2 ();

    // Parser construction API.
    //
    void
    artist_parser (::restapi::ArtistID3_pskel&);

    void
    album_parser (::restapi::AlbumID3_pskel&);

    void
    song_parser (::restapi::Child_pskel&);

    void
    parsers (::restapi::ArtistID3_pskel& /* artist */,
             ::restapi::AlbumID3_pskel& /* album */,
             ::restapi::Child_pskel& /* song */);

    // Constructor.
    //
    Starred2_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::ArtistID3_pskel* artist_parser_;
    ::restapi::AlbumID3_pskel* album_parser_;
    ::restapi::Child_pskel* song_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Starred2_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class License_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    valid (bool);

    virtual void
    email (const ::std::string&);

    virtual void
    key (const ::std::string&);

    virtual void
    date (const ::xml_schema::date_time&);

    virtual void
    post_License ();

    // Parser construction API.
    //
    void
    valid_parser (::xml_schema::boolean_pskel&);

    void
    email_parser (::xml_schema::string_pskel&);

    void
    key_parser (::xml_schema::string_pskel&);

    void
    date_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::xml_schema::boolean_pskel& /* valid */,
             ::xml_schema::string_pskel& /* email */,
             ::xml_schema::string_pskel& /* key */,
             ::xml_schema::date_time_pskel& /* date */);

    // Constructor.
    //
    License_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::boolean_pskel* valid_parser_;
    ::xml_schema::string_pskel* email_parser_;
    ::xml_schema::string_pskel* key_parser_;
    ::xml_schema::date_time_pskel* date_parser_;

    protected:
    struct v_state_attr_
    {
      bool valid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Users_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    user ();

    virtual void
    post_Users ();

    // Parser construction API.
    //
    void
    user_parser (::restapi::User_pskel&);

    void
    parsers (::restapi::User_pskel& /* user */);

    // Constructor.
    //
    Users_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::restapi::User_pskel* user_parser_;

    protected:
    struct v_state_descr_
    {
      void (::restapi::Users_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class User_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    username (const ::std::string&);

    virtual void
    email (const ::std::string&);

    virtual void
    scrobblingEnabled (bool);

    virtual void
    adminRole (bool);

    virtual void
    settingsRole (bool);

    virtual void
    downloadRole (bool);

    virtual void
    uploadRole (bool);

    virtual void
    playlistRole (bool);

    virtual void
    coverArtRole (bool);

    virtual void
    commentRole (bool);

    virtual void
    podcastRole (bool);

    virtual void
    streamRole (bool);

    virtual void
    jukeboxRole (bool);

    virtual void
    shareRole (bool);

    virtual void
    post_User ();

    // Parser construction API.
    //
    void
    username_parser (::xml_schema::string_pskel&);

    void
    email_parser (::xml_schema::string_pskel&);

    void
    scrobblingEnabled_parser (::xml_schema::boolean_pskel&);

    void
    adminRole_parser (::xml_schema::boolean_pskel&);

    void
    settingsRole_parser (::xml_schema::boolean_pskel&);

    void
    downloadRole_parser (::xml_schema::boolean_pskel&);

    void
    uploadRole_parser (::xml_schema::boolean_pskel&);

    void
    playlistRole_parser (::xml_schema::boolean_pskel&);

    void
    coverArtRole_parser (::xml_schema::boolean_pskel&);

    void
    commentRole_parser (::xml_schema::boolean_pskel&);

    void
    podcastRole_parser (::xml_schema::boolean_pskel&);

    void
    streamRole_parser (::xml_schema::boolean_pskel&);

    void
    jukeboxRole_parser (::xml_schema::boolean_pskel&);

    void
    shareRole_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* username */,
             ::xml_schema::string_pskel& /* email */,
             ::xml_schema::boolean_pskel& /* scrobblingEnabled */,
             ::xml_schema::boolean_pskel& /* adminRole */,
             ::xml_schema::boolean_pskel& /* settingsRole */,
             ::xml_schema::boolean_pskel& /* downloadRole */,
             ::xml_schema::boolean_pskel& /* uploadRole */,
             ::xml_schema::boolean_pskel& /* playlistRole */,
             ::xml_schema::boolean_pskel& /* coverArtRole */,
             ::xml_schema::boolean_pskel& /* commentRole */,
             ::xml_schema::boolean_pskel& /* podcastRole */,
             ::xml_schema::boolean_pskel& /* streamRole */,
             ::xml_schema::boolean_pskel& /* jukeboxRole */,
             ::xml_schema::boolean_pskel& /* shareRole */);

    // Constructor.
    //
    User_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* username_parser_;
    ::xml_schema::string_pskel* email_parser_;
    ::xml_schema::boolean_pskel* scrobblingEnabled_parser_;
    ::xml_schema::boolean_pskel* adminRole_parser_;
    ::xml_schema::boolean_pskel* settingsRole_parser_;
    ::xml_schema::boolean_pskel* downloadRole_parser_;
    ::xml_schema::boolean_pskel* uploadRole_parser_;
    ::xml_schema::boolean_pskel* playlistRole_parser_;
    ::xml_schema::boolean_pskel* coverArtRole_parser_;
    ::xml_schema::boolean_pskel* commentRole_parser_;
    ::xml_schema::boolean_pskel* podcastRole_parser_;
    ::xml_schema::boolean_pskel* streamRole_parser_;
    ::xml_schema::boolean_pskel* jukeboxRole_parser_;
    ::xml_schema::boolean_pskel* shareRole_parser_;

    protected:
    struct v_state_attr_
    {
      bool username;
      bool scrobblingEnabled;
      bool adminRole;
      bool settingsRole;
      bool downloadRole;
      bool uploadRole;
      bool playlistRole;
      bool coverArtRole;
      bool commentRole;
      bool podcastRole;
      bool streamRole;
      bool jukeboxRole;
      bool shareRole;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Error_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    code (int);

    virtual void
    message (const ::std::string&);

    virtual void
    post_Error ();

    // Parser construction API.
    //
    void
    code_parser (::xml_schema::int_pskel&);

    void
    message_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::int_pskel& /* code */,
             ::xml_schema::string_pskel& /* message */);

    // Constructor.
    //
    Error_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::int_pskel* code_parser_;
    ::xml_schema::string_pskel* message_parser_;

    protected:
    struct v_state_attr_
    {
      bool code;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SUBSONIC_REST_API_PSKEL_HXX
